{"version":3,"sources":["components/windowOpener.js","Home.js","App.js","reportWebVitals.js","index.js"],"names":["browser","popup","timer","watcher","clearInterval","closed","focus","close","message","WindowOpener","props","onClickHandler","bind","window","self","this","url","name","opts","refEntries","open","setTimeout","opener","postMessage","selectedRefEntries","setInterval","children","className","type","onClick","React","Component","defaultProps","Home","handleFocus","extension","field","setFocus","removeEntry","e","id","currentTarget","dataset","entryList","state","splice","findIndex","index","uid","saveExtensionData","dragulaDecorator","componentBackingInstance","Dragula","copySortSource","config","referenceTo","envList","initialLoader","sonResponse","isEmpty","ctUid","entry","Promise","resolve","stack","ContentType","Entry","addParam","fetch","then","result","a","newResult","Object","assign","nameEnv","publish_details","map","newEntry","length","environments","filter","env","environment","push","catch","err","console","log","ContentstackUIExtension","init","initialEntries","getData","mergedConfig","fieldConfig","enableAutoResizing","getEnvironments","setState","apiKey","api_key","undefined","processedEntries","all","getProcessedEntry","_content_type_uid","schema","reference_to","addEventListener","receiveMessage","event","data","query","JSON","parse","replace","getConfig","source","origin","getEntries","selectedRef","skip","entries","loadmoreResult","Query","limit","regex","find","searchResult","contentTypeUid","reject","extensionData","forEach","selected","setData","res","obj","key","prototype","hasOwnProperty","call","host","location","parent","document","referrer","href","ref","title","target","src","redirectUrl","bridge","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f663c3d0.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\n// Main Window.\nlet browser = null;\n// child window.\nlet popup = null;\n// interval\nlet timer = null;\n\n// This function is what the name says.\n// it checks whether the popup still open or not\nfunction watcher() {\n  // if popup is null then let's clean the intervals.\n  if (popup === null) {\n    clearInterval(timer);\n    timer = null;\n    // if popup is not null and it is not closed, then let's set the focus on it... maybe...\n  } else if (popup !== null && !popup.closed) {\n    popup.focus();\n    // if popup is closed, then let's clean errthing.\n  } else if (popup !== null && popup.closed) {\n    clearInterval(timer);\n    browser.focus();\n    // the onCloseEventHandler it notifies that the child has been closed.\n    browser.close({ message: \"child was closed\" });\n    timer = null;\n    popup = null;\n  }\n}\n\nexport class WindowOpener extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClickHandler = this.onClickHandler.bind(this);\n    // browser is set to current window\n    browser = window.self;\n  }\n  // opens a child\n  onClickHandler() {\n    const { url, name, opts, refEntries } = this.props;\n    // if there is  already a child open, let's set focus on it\n    if (popup && !popup.closed) {\n      popup.focus();\n\n      return;\n    }\n    // we open a new window.\n    popup = browser.open(url, name, opts);\n\n    setTimeout(() => {\n      // The opener object is created once and only if a window has a parent\n      // popup.opener.onOpen({message:\"Opening Reference Popup\"});\n      popup.opener.postMessage(\n        { message: \"Opening Reference Popup\", selectedRefEntries: refEntries },\n        \"*\"\n      );\n    }, 0);\n\n    if (timer === null) {\n      // each two seconds we check if the popup still open or not\n      timer = setInterval(watcher, 2000);\n    }\n\n    return;\n  }\n\n  render() {\n    const { children } = this.props;\n    return (\n      <button\n        className=\"choose_btn\"\n        type=\"choose_btn\"\n        onClick={this.onClickHandler}\n      >\n        {children}\n      </button>\n    );\n  }\n}\n\nWindowOpener.propTypes = {\n  url: PropTypes.string.isRequired,\n  bridge: PropTypes.func.isRequired,\n  name: PropTypes.string,\n  opts: PropTypes.string,\n};\nWindowOpener.defaultProps = {\n  name: \"Reference Popup\",\n  opts: `dependent=${1}, alwaysOnTop=${0}, alwaysRaised=${1}, width=${800}, height=${590}, left=${250}, top=${120}`,\n};\n","/* eslint-disable react/jsx-no-target-blank */\nimport React from \"react\";\nimport Dragula from \"react-dragula\";\nimport { WindowOpener } from \"./components/windowOpener\";\nimport ContentstackUIExtension from \"@contentstack/ui-extensions-sdk\";\nimport \"./styles/style.css\";\n\nexport class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.extension = {};\n    this.state = {\n      message: \"\",\n      entryList: [],\n      config: {},\n      referenceTo: [],\n      envList: [],\n      initialLoader: true,\n    };\n    this.sonResponse = this.sonResponse.bind(this);\n    this.isEmpty = this.isEmpty.bind(this);\n  }\n\n  getProcessedEntry(ctUid, uid, entry) {\n    return new Promise((resolve) => {\n      this.extension.stack\n        .ContentType(ctUid)\n        .Entry(uid)\n        .addParam(\"include_publish_details\", \"true\")\n        .fetch()\n        .then(async (result) => {\n          let newResult = Object.assign({}, result.entry, entry);\n          let nameEnv = [];\n          newResult.publish_details.map((newEntry) => {\n            if (this.state.envList.length > 0) {\n              this.state.envList.environments.filter((env) => {\n                if (env.uid === newEntry.environment) nameEnv.push(env.name);\n              });\n            }\n\n            return nameEnv;\n          });\n\n          newResult[\"publish_details\"] = nameEnv;\n          resolve(newResult);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  }\n\n  componentDidMount() {\n    ContentstackUIExtension.init().then(async (extension) => {\n      let initialEntries = extension.field.getData();\n      let mergedConfig = Object.assign(extension.config, extension.fieldConfig);\n      this.extension = extension;\n      extension.window.enableAutoResizing();\n\n      extension.stack.getEnvironments(\"get\").then((result) => {\n        this.setState({\n          envList: result,\n          apiKey: extension.stack.getData().api_key,\n        });\n      });\n\n      if (\n        initialEntries !== null &&\n        initialEntries !== undefined &&\n        !this.isEmpty(initialEntries)\n      ) {\n        let processedEntries = [];\n\n        await Promise.all(\n          initialEntries.map(async (entry) => {\n            let newResult = await this.getProcessedEntry(\n              entry._content_type_uid,\n              entry.uid,\n              entry\n            );\n            processedEntries.push(newResult);\n          })\n        );\n\n        this.setState(\n          {\n            config: mergedConfig,\n            referenceTo: extension.field.schema.reference_to,\n            entryList: processedEntries,\n            initialLoader: false,\n          },\n          () => {\n            extension.window.enableAutoResizing();\n            window.addEventListener(\"message\", receiveMessage, false);\n          }\n        );\n      } else {\n        this.setState(\n          {\n            config: mergedConfig,\n            referenceTo: extension.field.schema.reference_to,\n            initialLoader: false,\n          },\n          () => {\n            extension.window.enableAutoResizing();\n            window.addEventListener(\"message\", receiveMessage, false);\n          }\n        );\n      }\n    });\n\n    const receiveMessage = (event) => {\n      const { data } = event;\n      const { config, entryList, referenceTo, envList } = this.state;\n      let query = config.query && JSON.parse(config.query.replace(/\\'/g, '\"'));\n\n      if (data.getConfig) {\n        event.source.postMessage(\n          {\n            message: \"Sending Config files\",\n            config,\n            referenceTo: referenceTo,\n            selectedRefEntries: entryList,\n          },\n          event.origin\n        );\n      } else if (data.selectedRefEntries) {\n        this.saveExtensionData(data.selectedRefEntries);\n      } else if (data.message === \"add\") {\n        this.getEntries(data.selectedRef, data.skip).then((result) => {\n          event.source.postMessage(\n            {\n              message: \"Sending entries\",\n              entries: result,\n            },\n            event.origin\n          );\n        });\n      } else if (data.message === \"loadmore\") {\n        this.getEntries(data.selectedRef, data.skip).then((result) => {\n          event.source.postMessage(\n            {\n              message: \"loadmoreResult\",\n              loadmoreResult: result,\n            },\n            event.origin\n          );\n        });\n      } else if (data.message === \"search\") {\n        if (config.query) {\n          this.extension.stack\n            .ContentType(data.selectedRef)\n            .Entry.Query()\n            .query(query)\n            .addParam(\"include_publish_details\", \"true\")\n            .addParam(\"include_count\", \"true\")\n            .limit(10)\n            .regex(\"title\", \"^\" + data.query, \"i\")\n            .find()\n            .then((result) => {\n              result.entries.map((entry) => {\n                let nameEnv = [];\n                entry.publish_details.map((newEntry) => {\n                  envList.environments.filter((env) => {\n                    if (env.uid === newEntry.environment)\n                      nameEnv.push(env.name);\n                  });\n                  return nameEnv;\n                });\n                entry[\"publish_details\"] = nameEnv;\n                entry[\"_content_type_uid\"] = data.selectedRef;\n              });\n\n              event.source.postMessage(\n                {\n                  message: \"searchResult\",\n                  searchResult: result,\n                },\n                event.origin\n              );\n            });\n        } else {\n          this.extension.stack\n            .ContentType(data.selectedRef)\n            .Entry.Query()\n            .addParam(\"include_publish_details\", \"true\")\n            .addParam(\"include_count\", \"true\")\n            .limit(10)\n            .regex(\"title\", \"^\" + data.query, \"i\")\n            .find()\n            .then((result) => {\n              result.entries.map((entry) => {\n                let nameEnv = [];\n                entry.publish_details.map((newEntry) => {\n                  envList.environments.filter((env) => {\n                    if (env.uid === newEntry.environment)\n                      nameEnv.push(env.name);\n                  });\n                  return nameEnv;\n                });\n                entry[\"publish_details\"] = nameEnv;\n                entry[\"_content_type_uid\"] = data.selectedRef;\n              });\n\n              event.source.postMessage(\n                {\n                  message: \"searchResult\",\n                  searchResult: result,\n                },\n                event.origin\n              );\n            });\n        }\n      }\n    };\n  }\n\n  getEntries(contentTypeUid, skip) {\n    let { config, envList } = this.state;\n    let query = config.query && JSON.parse(config.query.replace(/\\'/g, '\"'));\n\n    if (config.query) {\n      return new Promise(async (resolve, reject) => {\n        this.extension.stack\n          .ContentType(contentTypeUid)\n          .Entry.Query()\n          .query(query)\n          .addParam(\"include_publish_details\", \"true\")\n          .addParam(\"include_count\", \"true\")\n          .limit(10)\n          .skip(skip[contentTypeUid])\n          .find()\n          .then((result) => {\n            result.entries.map((entry) => {\n              let nameEnv = [];\n              entry.publish_details.map((newEntry) => {\n                envList.environments.filter((env) => {\n                  if (env.uid === newEntry.environment) nameEnv.push(env.name);\n                });\n                return nameEnv;\n              });\n              entry[\"publish_details\"] = nameEnv;\n              entry[\"_content_type_uid\"] = contentTypeUid;\n            });\n            resolve(result);\n          })\n          .catch((err) => {\n            console.log(err);\n            reject(err);\n          });\n      });\n    } else {\n      return new Promise(async (resolve, reject) => {\n        this.extension.stack\n          .ContentType(contentTypeUid)\n          .Entry.Query()\n          .addParam(\"include_publish_details\", \"true\")\n          .addParam(\"include_count\", \"true\")\n          .limit(10)\n          .skip(skip[contentTypeUid])\n          .find()\n          .then((result) => {\n            result.entries.map((entry) => {\n              let nameEnv = [];\n              entry.publish_details.map((newEntry) => {\n                envList.environments.filter((env) => {\n                  if (env.uid === newEntry.environment) nameEnv.push(env.name);\n                });\n                return nameEnv;\n              });\n              entry[\"publish_details\"] = nameEnv;\n              entry[\"_content_type_uid\"] = contentTypeUid;\n            });\n            resolve(result);\n          })\n          .catch((err) => {\n            console.log(err);\n            reject(err);\n          });\n      });\n    }\n  }\n\n  saveExtensionData(entries) {\n    let extensionData = [];\n\n    entries.forEach((selected) => {\n      extensionData.push({\n        uid: selected.uid,\n        _content_type_uid: selected._content_type_uid,\n      });\n    });\n\n    this.extension.field.setData(extensionData);\n    this.setState({ entryList: entries });\n  }\n\n  handleFocus = () => {\n    this.extension.field.setFocus();\n  };\n\n  removeEntry = (e) => {\n    let id = e.currentTarget.dataset.id;\n    let { entryList } = this.state;\n\n    entryList.splice(\n      entryList.findIndex((index) => index.uid === id),\n      1\n    );\n\n    this.saveExtensionData(entryList);\n  };\n\n  sonResponse(err, res) {\n    if (err) {\n      this.setState({ message: res.message });\n    }\n  }\n\n  dragulaDecorator = (componentBackingInstance) => {\n    if (componentBackingInstance) {\n      let options = {\n        copySortSource: true,\n      };\n      Dragula([componentBackingInstance], options);\n    }\n  };\n\n  isEmpty(obj) {\n    for (let key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) return false;\n    }\n    return true;\n  }\n\n  render() {\n    const { entryList, config, apiKey, initialLoader } = this.state;\n    let host =\n      window.location != window.parent.location\n        ? document.referrer\n        : document.location.href;\n\n    return (\n      <header className=\"App-header\">\n        {initialLoader ? (\n          <div className=\"reference-loading\">\n            <div className=\"loading-flash\">\n              <div></div>\n              <div></div>\n              <div></div>\n              <div></div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"wrapper\" id=\"wrapper\" onClick={this.handleFocus}>\n            <div className=\"container\">\n              {entryList.length > 0 ? (\n                <div className=\"selected-reference-count\">\n                  {entryList.length} entry referenced\n                </div>\n              ) : (\n                \"\"\n              )}\n              <div className=\"main\">\n                <div className=\"selected-item\">\n                  <div className=\"row selected-list\">\n                    <ul className=\"drag1\" ref={this.dragulaDecorator}>\n                      {entryList?.map((entry, index) => {\n                        return (\n                          <li id={entry.uid} key={index}>\n                            <div className=\"file\">\n                              <div className=\"entry-ref\">\n                                <div>{entry.title}</div>\n                                <div className=\"content-type\">\n                                  Content type:{\" \"}\n                                  <span>{entry._content_type_uid}</span>\n                                </div>\n                              </div>\n                              <div className=\"ref-action\">\n                                <span className=\"edit-entry\">\n                                  <a\n                                    href={`${host}#!/stack/${apiKey}/content-type/${entry._content_type_uid}/en-us/entry/${entry.uid}/edit`}\n                                    target=\"_blank\"\n                                  >\n                                    <img src=\"https://app.contentstack.com/static/images/edit-icon-ref1.svg\" />\n                                  </a>\n                                </span>\n                                <span\n                                  className=\"file-action trash\"\n                                  data-id={entry.uid}\n                                  onClick={this.removeEntry.bind(this)}\n                                >\n                                  <img src=\"https://app.contentstack.com/static/images/remove-entry.svg\" />\n                                </span>\n                              </div>\n                            </div>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <WindowOpener\n              url={config.redirectUrl}\n              bridge={this.sonResponse}\n              refEntries={entryList}\n            >\n              Choose Entry\n            </WindowOpener>\n          </div>\n        )}\n      </header>\n    );\n  }\n}\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport { Home } from \"./Home\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}